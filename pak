#!/usr/bin/env bash

set -e

# Configuration
#pakroot="$HOME/pak-root"
pakroot="/"
temp_dir="/tmp/pak/download-$RANDOM-$RANDOM-$RANDOM-$RANDOM/"
pakconfig="/etc/pak"
pakvar="/var/pak"

mkdir -p "$temp_dir"

help_exit_status=0

# String data
version="2.0.1 [beta] buggy edition"
version_string="PAK v $version"

usage_string="Usage: $0 [options] <action> [<package> [<package> ...]]"
help_string="
Action:
    install - install package from local file, <package> is filename
    get     - download package from mirror, don't install, <package> is package name
    mirror  - download and install package, <package> is package name
    update  - update mirror package index
    remove  - remove installed package, <package> is package name
    list    - list all available packages
    pakroot - print value of pakroot variable
    help    - Show this help screen and exit, do not parse options any further
Options:
    -h | --help     Same as 'help' action
         --         Treat next options as filenames or package names
                    It is an error to use this option before specifying an action
Package:
    Not necessarily a package name like one in package index, it depends on actions.
    It is possible to provide a space-separated package list as one argument
    For example, this command is absolutely valid:
        pak mirror 'foo bar' baz
    and will install packages 'foo', 'bar' and 'baz'
"

# Options and actions, filled by command line arguments

o_help=none         # Show that kind of information and exit, 'none' means normal behavior
o_names=""          # Space-separated list of filenames or package names
o_ignore_depends=no # Ignore dependencies
o_action=help       # Action

# State variables
pkgpath=''

# Functions
die() {
    rm -r "$temp_dir"
    echo -e "\e[31mFatal error: $1\e[0m" >&2
    exit 1
}
ask() {
    echo -e "$1"
    read ans
    case $ans in
        y|yes|Y|Yes|YES)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

show_help() {
    case $o_help in
        help)
            echo -e "$usage_string"    # TODO: legacy code, get rid of usage_string
            echo -e "$help_string"
            ;;
        version)
            echo -e "$version_string"
            ;;
        pakroot)
            echo "$pakroot"
            ;;
        # No request for printing help message
        *)
            return 0
            ;;
    esac
    return $help_exit_status
}

is_installed() {
    cat "$pakvar/pak_index.txt" | grep -xFq "$1"
    return $?
}

add_to_index() {
    if ! is_installed "$1"; then
        echo "$1" >> "$pakvar/pak_index.txt"
    fi
}

remove_from_index() {
    if is_installed "$1"; then
        cat "$pakvar/pak_index.txt" | grep -xFv "$1" > "$pakvar/pak_index_tmp.txt"
        mv "$pakvar/pak_index_tmp.txt" "$pakvar/pak_index.txt"
    fi
}

get_packages() {
    if [ -z "$1" ]; then
        help_exit_status=1 o_help=help show_help
        exit 1
    fi

    echo "Going to download packages: "
    for i in $1; do
        echo "    $i"
    done

    if ! ask "Continue?"; then
        echo "Aborting."
        exit 1
    fi

    local cnt=0
    for i in $1; do
        get_package "$i" --current-dir && (( ++cnt ))
    done

    echo "$cnt packages were successfully downloaded"
}

list_packages() {
    mirror_list="$pakconfig/mirrors/"
    url=""
    for i in `ls "$mirror_list"`; do
        cat "$mirror_list/$i" | tail -n +2 | sed 's/: .*$//g' | while read pkgname; do
            if is_installed "$pkgname"; then
                echo -n "$pkgname"
                echo -ne " \e[1;32m[Installed]\e[0m" >&2
                echo
            else
                echo "$pkgname"
            fi
        done
    done
}

get_package() {
    mirror_list="$pakconfig/mirrors/"
    url=""
    for i in `ls "$mirror_list"`; do
        s="`cat "$mirror_list/$i" | grep "^$1: "`"
        if [ "x$s" != x ]; then
            pak_url=`echo "$s" | awk '{print $2}'`
            if [ "x$pak_url" == x ]; then
                continue
            else
                break
            fi
        fi
    done
    if [ "x$pak_url" == x ]; then
        echo "Package '$1' not found in the mirror list"
        return 1
    fi
    if [ "$2" == "--current-dir" ]; then
        pkgpath="./$1.pak"
    else
        pkgpath="$temp_dir/$RANDOM-$RANDOM-$RANDOM.pak"
    fi

    echo "Package $1"

    # wget is too noisy
    #if wget -q -O "$pkgpath" -4 "$pak_url"; then

    if curl -L -# -4 -o "$pkgpath" "$pak_url"; then
        echo "    Downloaded"
    else
        echo "    Failed"
        return 1
    fi
    return 0
}

install_packages() {
    if [ -z "$1" ]; then
        help_exit_status=1 o_help=help show_help
        exit 1
    fi

    echo "Going to install packages: "
    for i in $1; do
        echo "    $i"
    done

    if ! ask "Continue?"; then
        echo "Aborting."
        exit 1
    fi

    local cnt=0
    for i in $1; do
        install_package_file "$i" && (( ++cnt ))
    done

    echo "$cnt packages were successfully installed"
}


remove_packages() {
    if [ -z "$1" ]; then
        help_exit_status=1 o_help=help show_help
        exit 1
    fi

    echo "Going to remove packages: "
    for i in $1; do
        echo "    $i"
    done

    if ! ask "Continue?"; then
        echo "Aborting."
        exit 1
    fi

    local cnt=0
    for i in $1; do
        remove_package "$i" && (( ++cnt ))
    done

    echo "$cnt packages were successfully removed"
}

remove_package() {
    echo "Removing package '$1'"
    if ! is_installed "$1"; then
        echo "Cannot remove package '$1': it is not installed"
        return 1
    fi
    if ! [ -f "$pakvar/$1.files" ]; then
        echo "Warning: cannot remove files of package '$i': file list is not present"
        echo "Warning appended to log: '$pakvar/pak.log'"
        echo "Warning: cannot remove files of package '$i': file list is not present" >> "$pakvar/pak.log"
    else
        cat "$pakvar/$1.files" | while read fil; do
            rm -rv "$pakroot/$fil"
            #echo rm -ri "$pakroot/$fil"
        done
    fi
    remove_from_index "$1" || return 2
}

install_package_file() {
    if ! [ -e "$1" ]; then
        echo "Installing package '$1' failed as file does not exist"
        return 1
    fi

    local temp_pkgname="$RANDOM-$RANDOM.tar.unknown"
    cp -- "$1" "$temp_dir/$temp_pkgname"
    mkdir "$temp_dir/$temp_pkgname.d"
    echo "Parsing '$1'..."
    if ! tar -xf "$temp_dir/$temp_pkgname" -C "$temp_dir/$temp_pkgname.d/" .pak2/{deps,name}; then
        echo "Installation failed as package format is unknown"
        return 1
    fi
    pkgname="`cat $temp_dir/$temp_pkgname.d/.pak2/name`"

    if is_installed "$pkgname"; then
        echo "Warning: package '$pkgname' is already installed, upgrading..."
    fi

    for dep in `cat $temp_dir/$temp_pkgname.d/.pak2/deps`; do
        if ! is_installed "$dep"; then
            if ! mirror_install_package_file "$dep"; then
                echo "Required dependency '$dep' not found"
                return 1
            fi
        fi
    done

    echo "Unpacking '$1'..."
    local ret=0
    if [ -f "$pakvar/$pkgname.files" ]; then
        mv "$pakvar/$pkgname.files" "$pakvar/$pkgname.files.old"
    fi
    tar -xf "$temp_dir/$temp_pkgname" -C "$temp_dir/$temp_pkgname.d" || ret=1
    for i in `ls -A "$temp_dir/$temp_pkgname.d/files/"`; do
        cp --preserve --no-preserve=owner -r "$temp_dir/$temp_pkgname.d/files/$i" "$pakroot" || ret=1
    done
    for i in `find "$temp_dir/$temp_pkgname.d/files/" -type f`; do
        echo "$i" | sed "s#^$temp_dir/$temp_pkgname.d/files##g" >> "$pakvar/$pkgname.files"
    done
    if [ $ret != 0 ]; then
        echo "    Failed"
        if [ -f "$pakvar/$pkgname.files.old" ]; then
            mv "$pakvar/$pkgname.files.old" "$pakvar/$pkgname.files"
        fi
    else
        echo "    Installed: $pkgname"
        add_to_index "$pkgname"
        if [ -f "$pakvar/$pkgname.files.old" ]; then
            rm "$pakvar/$pkgname.files.old"
        fi
    fi
    return $ret
}

update_package_lists() {
    echo 'Updating package lists'
    mirror_list="$pakconfig/mirrors/"
    for i in `ls "$mirror_list"`; do
        s="`cat "$mirror_list/$i" | grep "^$1: "`"
        #echo "s = [$s]"
        if [ "x$s" != x ]; then
            pak_url=`echo "$s" | awk '{print $2}'`
            #echo "pu = [$pak_url]"
            if [ "x$pak_url" == x ]; then
                continue
            else
                break
            fi
        fi
    done
    case `ls "$mirror_list" | wc -l` in
        0)
            echo "No lists to update"
            return 1
            ;;
    esac
    for i in `ls "$mirror_list"`; do
        f="$mirror_list/$i"
        echo "Updating $fâ€¦"
        lnk="`head -n 1 $f`"
        if ! wget -q "$lnk" -O "$f.new"; then
            echo -e "Unable to update $f"
            continue
        fi
        cp "$f" "$pakconfig/backup/$i"
        mv "$f.new" "$f"
        echo -e "$f updated successfully"
    done
    echo "Done"
}

check_exist_package() {
    mirror_list="$pakconfig/mirrors/"
    url=""
    for i in `ls "$mirror_list"`; do
        cat "$mirror_list/$i" | tail -n +2 | sed 's/: .*$//g' | while read pkgname; do
            if [[ "$pkgname" == "$1" ]]; then
                echo yes
                return 0
            fi
        done
    done
    echo no
}

check_exist_packages() {
    for j in $1; do
        if [[ "$(check_exist_package "$j")" == "no" ]]; then
            echo "Unable to find package '$j' in mirror list"
            exit 1
        fi
    done
}

mirror_install_packages() {
    if [ -z "$1" ]; then
        help_exit_status=1 o_help=help show_help
        exit 1
    fi

    check_exist_packages $1

    echo "Going to install packages: "
    for i in $1; do
        echo "    $i"
    done

    if ! ask "Continue?"; then
        echo "Aborting."
        exit 1
    fi

    local cnt=0
    for i in $1; do
        mirror_install_package_file "$i" && (( ++cnt ))
    done

    echo "$cnt packages were successfully installed"
}

mirror_install_package_file() {
    get_package "$1" || return 1
    install_package_file "$pkgpath" || return 2
    return 0
}

# Temporary variables

t_all_names=no      # Interpret everything as a package or file name (if '--' option specified)
t_was_action=no     # Set to 'yes' when action specifier is read

# Parse args
while [ "a$1" != "a" ]; do

    # If we treat all arguments as file/package names
    if [ "a$t_all_names" == "ayes" ]; then
        # Append file/package name to list
        o_names="$o_names $1"
        shift
        continue
    fi

    # Parse actions

    #install - install package from local file, <package> is filename
    #get     - download package from mirror, don't install, <package> is package name
    #mirror  - download and install package, <package> is package name
    #update  - update mirror package index
    #remove  - remove installed package, <package> is package name
    #pakroot - print value of pakroot variable
    #help    - Show this help screen and exit, do not parse options any further

    if [ "a$t_was_action" == "ano" ]; then
        t_is_action_valid="yes"
        case $1 in
            install)
                action=install
                ;;
            get)
                action=get
                ;;
            mirror)
                action=mirror
                ;;
            update)
                action=update
                ;;
            remove)
                action=remove
                ;;
            list)
                action=list
                ;;
            pakroot)
                o_help=pakroot
                action=help
                ;;
            help)
                o_help=help
                action=help
                ;;
            *)
                t_is_action_valid="no"
        esac

        if [ "a$t_is_action_valid" == "ayes" ]; then
            t_was_action="yes"
            shift
            continue
        fi
    fi


    # If we meet a '--help' or similar options (and we don't treat them as file/package names)
    case $1 in
        -h|--help)
            o_help=help
            show_help
            exit $?
            ;;
        -V|--version)
            o_help=version
            show_help
            exit $?
            ;;
        --)
            t_all_names="yes"
            shift
            continue
            ;;
    esac

    # Append file/package name to list
    o_names="$o_names $1"

    shift
done

if [ "a$t_was_action" == "ano" ]; then
    o_help=help
    show_help
    exit 1
fi

# Normalize $o_names a bit
o_names="`echo $o_names | xargs echo -- | sed 's/^-- \?//g'`"

if ! [ -d "$pakroot" ]; then
    echo "Directory '$pakroot' (PAK root) is missing, creating..."
    if ! mkdir -p "$pakroot"; then
        die "unable to create PAK root directory"
    fi
fi

case $action in
    install)
        install_packages "$o_names"
        ;;
    get)
        get_packages "$o_names"
        ;;
    mirror)
        mirror_install_packages "$o_names"
        ;;
    update)
        update_package_lists
        ;;
    remove)
        remove_packages "$o_names"
        ;;
    list)
        list_packages
        ;;
    help)
        case $o_help in
            help)
                show_help
                exit
                ;;
            pakroot)
                echo "$pakroot"
                exit
                ;;
        esac
        ;;
    *)
        die "invalid action: '$action'"
esac

rm -r "$temp_dir"
