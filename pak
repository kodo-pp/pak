#!/bin/bash

# Configuration
pakroot="$HOME/pak-root"
temp_dir="/tmp/pak/download-$RANDOM-$RANDOM-$RANDOM-$RANDOM/"

help_exit_status=0

# String data
version="2.0 [dev] buggy edition"
version_string="PAK v $version"

usage_string="Usage: $0 [options] <action> [<package> [<package> ...]]"
help_string="
Action:
    install - install package from local file, <package> is filename
    get     - download package from mirror, don't install, <package> is package name
    mirror  - download and install package, <package> is package name
    update  - update mirror package index
    upgrade - install newer versions of all upgradable packages
    remove  - remove installed package, <package> is package name
    pakroot - print value of pakroot variable
    help    - Show this help screen and exit, do not parse options any further
Options:
    -f | --force    Ignore dependencies. Can \e[9mfuc\e[0m break everything
    -h | --help     Same as 'help' action
         --         Treat next options as filenames or package names
                    It is an error to use this option before specifying an action
Package:
    Not necessarily a package name like one in package index, it depends on actions.
    It is possible to provide a space-separated package list as one argument
    For example, this command is absolutely valid:
        pak mirror 'foo bar' baz
    and will install packages 'foo', 'bar' and 'baz'
"

# Options and actions, filled by command line arguments

o_help=none         # Show that kind of information and exit, 'none' means normal behavior
o_names=""          # Space-separated list of filenames or package names
o_ignore_depends=no # Ignore dependencies
o_action=help       # Action

# Functions
die()
{
    rm -rf "$temp_dir"
    echo -e "\e[31mFatal error: $1\e[0m" >&2
    exit 1
}
ask()
{
    echo -e "$1"
    read ans
    case $ans in
        y|yes|Y|Yes|YES)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

show_help()
{
    case $o_help in
        help)
            echo -e "$usage_string"    # TODO: legacy code, get rid of usage_string
            echo -e "$help_string"
            ;;
        version)
            echo -e "$version_string"
            ;;
        pakroot)
            echo "$pakroot"
            ;;
        # No request for printing help message
        *)
            return 0
            ;;
    esac
    return $help_exit_status
}

# Temporary variables

t_all_names=no      # Interpret everything as a package or file name (if '--' option specified)
t_was_action=no     # Set to 'yes' when action specifier is read

# Parse args
while [ "a$1" != "a" ]; do

    # If we treat all arguments as file/package names
    if [ "a$t_all_names" == "ayes" ]; then
        # Append file/package name to list
        o_names="$o_names $1"
        shift
        continue
    fi

    # Parse actions

    #install - install package from local file, <package> is filename
    #get     - download package from mirror, don't install, <package> is package name
    #mirror  - download and install package, <package> is package name
    #update  - update mirror package index
    #upgrade - install newer versions of all upgradable packages
    #remove  - remove installed package, <package> is package name
    #pakroot - print value of pakroot variable
    #help    - Show this help screen and exit, do not parse options any further

    if [ "a$t_was_action" == "ano" ]; then
        t_is_action_valid="yes"
        case $1 in
            install)
                action=install
                ;;
            get)
                action=get
                ;;
            mirror)
                action=mirror
                ;;
            update)
                action=update
                ;;
            upgrade)
                action=upgrade
                ;;
            remove)
                action=remove
                ;;
            pakroot)
                o_help=pakroot
                action=help
                ;;
            help)
                o_help=help
                action=help
                ;;
            *)
                t_is_action_valid="no"
        esac

        if [ "a$t_is_action_valid" == "ayes" ]; then
            t_was_action="yes"
            shift
            continue
        fi
    fi


    # If we meet a '--help' or similar options (and we don't treat them as file/package names)
    case $1 in
        -h|--help)
            o_help=help
            show_help
            exit $?
            ;;
        -V|--version)
            o_help=version
            show_help
            exit $?
            ;;
        --)
            t_all_names="yes"
            shift
            continue
            ;;
    esac

    # Append file/package name to list
    o_names="$o_names $1"

    shift
done

if [ "a$t_was_action" == "ano" ]; then
    o_help=help
    show_help
    exit 1
fi

# Normalize $o_names a bit
o_names="`echo $o_names | xargs echo -- | sed 's/^-- //g'`"

# TODO
echo "Action: $action"
echo "Packages: $o_names"
echo "Next actions not implemented"
exit 42

#echo "Args:
#  -g=$o_get
#  -i=$o_install
#  -v=$o_verbose
#  -h=$o_help
#  -S=$o_show
#"
show_help || exit 1

pak_fname="$o_pkg"

mkdir -p "$root"

case $o_get in
    yes)
        pak_url="$o_pkg"
        mkdir -p "$temp_dir" || die 'Unable to create temporary directory'
        wget -O "$temp_dir/package.pak" "$pak_url" || die 'Unable to get the package'
        pak_fname="$temp_dir/package.pak"
        ;;
    mirror)
        pak_url=""
        for i in `ls "$paklist_dir"`; do
            s=`cat "$paklist_dir/$i" | egrep "^$o_pkg "`
            #echo "s = [$s]"
            if [ "x$s" != x ]; then
                pak_url=`echo "$s" | awk '{print $2}'`
                #echo "pu = [$pak_url]"
                if [ "x$pak_url" == x ]; then
                    continue
                else
                    break
                fi
            fi
        done
        #echo "[x$pak_url]"
        if [ "x$pak_url" == x ]; then
            die "Package \`$o_pkg' not found"
        fi
        mkdir -p "$temp_dir" || die 'Unable to create temporary directory'
        wget -O "$temp_dir/package.pak" "$pak_url" || die 'Unable to get the package'
        pak_fname="$temp_dir/package.pak"
esac

case $o_show in
    yes)
        output 'Contents:'
        tar -tf "$pak_fname"
        ;;
esac

case $o_install in
    yes)
        output "Installing $pak_fname"
        if ! ask "Do you really want to install package?"; then
            output 'Aborting'
            rm -rf "$temp_dir"
            exit 1;
        fi
        if tar -tf "$pak_fname" ./install.sh 2>/dev/null; then
            tar -xf "$pak_fname" ./install.sh
            output 'Running install.sh' -v
            bash install.sh "$pak_fname" || die 'Failed to install'
            rm install.sh
        else
            output "Unpacking to $root" -v
            tar -xf "$pak_fname" -C "$root" || die 'Failed to install'
        fi
        output "Successfully installed"
        rm -rf "$temp_dir"
        ;;
    uninstall)
        output "Uninstalling $pak_fname"
        if ! ask "Do you really want to uninstall package?"; then
            output 'Aborting'
            exit 1
        fi
        if tar -tf "$pak_fname" ./uninstall.sh 2>/dev/null; then
            tar -xf "$pak_fname" ./uninstall.sh
            output 'Running uninstall.sh' -v
            bash uninstall.sh "$pak_fname" || die 'Failed to uninstall'
            rm uninstall.sh
        else
            output "Going to remove:\n`tar -tf "$pak_fname" | sed "s#^#$root/#g"`"
            if ! ask 'Continue?'; then
                output 'Aborting'
                exit 1
            fi
            (tar -tf "$pak_fname" | sed "s#^#$root/#g" | xargs rm) || die 'Failed to uninstall'
        fi
        output 'Successfully uninstalled'
        ;;
    update)
        echo 'Updating package list'
        if ! [ -d "$paklist_dir" ]; then
            mkdir "$paklist_dir"
        fi
        case `ls "$paklist_dir" | wc -l` in
            0)
                echo "No lists to update"
                exit 1
                ;;
        esac
        for i in `ls "$paklist_dir"`; do
            f="$paklist_dir/$i"
            echo "Updating $fâ€¦"
            lnk="`head -n 1 $f`"
            if ! wget $lnk -O "$f.new"; then
                echo -e "\e[31mUnable to update $f\e[0m"
                continue
            fi
            mv "$f.new" "$f"
            echo -e "\e[32m$f updated successfully\e[0m"
        done
        echo "Done"
esac
